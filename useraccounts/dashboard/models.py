from django.db import models
from django.contrib.auth.models import AbstractUser, Permission, Group
from django.conf import settings



class CustomUser(AbstractUser):
    phone_number = models.CharField(max_length=15,verbose_name='Phone number', blank=True)
    photo = models.ImageField(upload_to='user/avatar/%Y/%m/%d', verbose_name='Photo', blank=True)
    address = models.CharField(max_length=255, verbose_name='Address', blank=True)
    groups = models.ManyToManyField(Group, related_name="customuser_set", blank=True)
    """
    groups Field:
    
    Type: Many-to-Many relationship with the Group model.
    Description: This field establishes a many-to-many relationship between the CustomUser model and the Group model. It allows a user to belong to multiple groups, and a group can have multiple users.
    Related Name: The related_name parameter specifies the name of the reverse relation from the Group model to the CustomUser model. In this case, it's set to "customuser_set", meaning you can access all users belonging to a group using this name.
    Example Usage:
        To get all groups a user belongs to: user.groups.all()
        To get all users in a group: group.customuser_set.all()
    """
    user_permissions = models.ManyToManyField(
        Permission, related_name="customuser_set", blank=True
    )    
    """
    user_permissions Field:

    Type: Many-to-Many relationship with the Permission model.
    Description: This field establishes a many-to-many relationship between the CustomUser model and the Permission model. It allows a user to have multiple permissions, and a permission can be assigned to multiple users.
    Related Name: Similar to the groups field, the related_name parameter specifies the name of the reverse relation from the Permission model to the CustomUser model. In this case, it's also set to "customuser_set".
    Example Usage:
        To get all permissions of a user: user.user_permissions.all()
        To get all users with a specific permission: permission.customuser_set.all()
    """
    
    """
   Additional Notes:
        Customization: By specifying related_name, 
    you customize the name of the reverse relation, 
    making your code more readable and maintaining consistency.
        Default Behavior: If related_name is not specified,
    Django uses the lowercase name of the related model followed by "_set" as the default reverse relation name.
        Best Practices: It's good practice to specify related_name to avoid clashes and provide more meaningful names for reverse relations. 
    """
    def __str__(self) -> str:
        return self.username #The username field from AbstractUser class

class Followers(models.Model):
    follower = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='following', on_delete=models.CASCADE)
    followed = models.ForeignKey( settings.AUTH_USER_MODEL, related_name='followers', on_delete=models.CASCADE)
    """
    related_name is an option you can specify in Django's ForeignKey, OneToOneField, and ManyToManyField fields. 
    It defines the reverse relationship name, which allows you to access related objects from the reverse side of the relationship.

For example, if you have a Followers model with a follower and followed fields, 
setting related_name allows you to access all follow relationships from the perspective of a user:

    user.following.all(): All users that user is following.
    user.followers.all(): All users that are following user.

Without related_name, the reverse lookup names would be generated by Django and might not be as clear or convenient. 
    """
    
    class Meta:
        unique_together = ('follower', 'followed') #Add unique constraints: Ensure that a user cannot follow the same user multiple times. (or remove this line and add unique=True for each field. It is similar to this code)
        
    def __str__(self):
        return f'{self.follower} follows {self.followed}'